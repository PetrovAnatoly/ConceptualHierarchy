/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Frames.AbstractBinaryFrame;
import Frames.AbstractFrame;
import Frames.AbstractSimpleFrame;
import Frames.AndFrame;
import Frames.NotFrame;
import Frames.OrFrame;
import GUI.Dialogs.FramesDialogs.BinaryFrameViewDialog;
import GUI.Dialogs.FramesDialogs.ChoiceTypeOfNewFrameDialog;
import GUI.Dialogs.ConceptDialogs.ConceptDialog;
import GUI.Dialogs.ConceptDialogs.ConstantViewDialog;
import GUI.Dialogs.GenerateDialog;
import GUI.Dialogs.FramesDialogs.NotFrameViewDialog;
import GUI.Dialogs.FramesDialogs.ViewSimpleFrameDialog;
import GUI.Dialogs.ErrorDialog;
import GUI.Models.ConceptNodeCellRenderer;
import GUI.Models.FrameNodeCellRenderer;
import ModelInputLoad.InputOutputCDL;
import conceptualhierarchy.ActualData;
import conceptualhierarchy.ConceptNode;
import conceptualhierarchy.FrameNode;
import ModelInputLoad.InputOutputXML;
import conceptualhierarchy.ActualConfiguration;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashSet;
import javax.swing.JFileChooser;
import javax.swing.JSplitPane;
import javax.swing.JTree;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import org.xml.sax.SAXException;
import Сoncepts.Concept;
import Сoncepts.Constant;

/**
 *
 * @author Anatoly
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        pack();
        //JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, true, framesPanel, conceptsPanel);
        //mainSplitPane.setLeftComponent(framesPanel);
        //splitPane.setVisible(true);
        //this.add(splitPane);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainSplitPane = new javax.swing.JSplitPane();
        framesPanel = new javax.swing.JPanel();
        addFrameButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        deleteFrameButton = new javax.swing.JButton();
        frameViewButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        frameTree = new javax.swing.JTree();
        conceptsPanel = new javax.swing.JPanel();
        removeConceptButton = new javax.swing.JButton();
        createConceptButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        conceptTree = new javax.swing.JTree();
        constantViewButton = new javax.swing.JButton();
        conceptViewButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveModelMenuItem = new javax.swing.JMenuItem();
        loadModelMenuItem = new javax.swing.JMenuItem();
        modelMenu = new javax.swing.JMenu();
        generateMenuItem = new javax.swing.JMenuItem();
        clearingMenu = new javax.swing.JMenu();
        clearExtensionalsMenuItem = new javax.swing.JMenuItem();
        removeAllNotDefFramesMenuItem = new javax.swing.JMenuItem();
        removeAllNotUsedConceptsMenuItem = new javax.swing.JMenuItem();
        removeAllNotUsedConstantsMenuItem = new javax.swing.JMenuItem();
        clearModelMenuItem = new javax.swing.JMenuItem();
        framesMultipleInheritanceCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        conceptsMultipleInheritanceCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        rolesExpansionCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        viewMenu = new javax.swing.JMenu();
        framesHierarchyViewMenu = new javax.swing.JMenu();
        expandFrameHierarchyMenuItem = new javax.swing.JMenuItem();
        collapseFrameHierarchyMenuItem = new javax.swing.JMenuItem();
        conceptsHierarchyViewMenu = new javax.swing.JMenu();
        expandConceptHierarchyMenuItem = new javax.swing.JMenuItem();
        collapseConceptHierarchyMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Модель предметной области");
        setMinimumSize(new java.awt.Dimension(570, 350));

        mainSplitPane.setDividerSize(7);
        mainSplitPane.setResizeWeight(0.5);
        mainSplitPane.setContinuousLayout(true);
        mainSplitPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        mainSplitPane.setOneTouchExpandable(true);

        framesPanel.setPreferredSize(new java.awt.Dimension(373, 458));

        addFrameButton.setText("Добавить фрейм");
        addFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFrameButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Фреймы:");

        deleteFrameButton.setText("Удалить фрейм");
        deleteFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFrameButtonActionPerformed(evt);
            }
        });

        frameViewButton.setText("Просмотреть фрейм");
        frameViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frameViewButtonActionPerformed(evt);
            }
        });

        updateFrameIsaTree();
        frameTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                frameTreeMouseClicked(evt);
            }
        });
        frameTree.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                frameTreeKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(frameTree);

        javax.swing.GroupLayout framesPanelLayout = new javax.swing.GroupLayout(framesPanel);
        framesPanel.setLayout(framesPanelLayout);
        framesPanelLayout.setHorizontalGroup(
            framesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(framesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(framesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(framesPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 139, Short.MAX_VALUE)
                        .addComponent(frameViewButton))
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, framesPanelLayout.createSequentialGroup()
                        .addComponent(addFrameButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteFrameButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        framesPanelLayout.setVerticalGroup(
            framesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(framesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(framesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(framesPanelLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel1))
                    .addComponent(frameViewButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(framesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteFrameButton)
                    .addComponent(addFrameButton))
                .addContainerGap())
        );

        mainSplitPane.setLeftComponent(framesPanel);

        conceptsPanel.setPreferredSize(new java.awt.Dimension(373, 458));

        removeConceptButton.setText("Удалить концепт");
        removeConceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeConceptButtonActionPerformed(evt);
            }
        });

        createConceptButton.setText("Добавить концепт");
        createConceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createConceptButtonActionPerformed(evt);
            }
        });

        updateConceptIsaTree();
        conceptTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                conceptTreeMouseClicked(evt);
            }
        });
        conceptTree.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                conceptTreeKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(conceptTree);

        constantViewButton.setText("Константы");
        constantViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                constantViewButtonActionPerformed(evt);
            }
        });

        conceptViewButton.setText("Свойства");
        conceptViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conceptViewButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Концепты:");

        javax.swing.GroupLayout conceptsPanelLayout = new javax.swing.GroupLayout(conceptsPanel);
        conceptsPanel.setLayout(conceptsPanelLayout);
        conceptsPanelLayout.setHorizontalGroup(
            conceptsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conceptsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(conceptsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(conceptsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                        .addComponent(constantViewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(conceptViewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(conceptsPanelLayout.createSequentialGroup()
                        .addComponent(createConceptButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeConceptButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        conceptsPanelLayout.setVerticalGroup(
            conceptsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conceptsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(conceptsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(conceptViewButton)
                    .addComponent(constantViewButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(conceptsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createConceptButton)
                    .addComponent(removeConceptButton))
                .addContainerGap())
        );

        mainSplitPane.setRightComponent(conceptsPanel);

        fileMenu.setText("Файл");

        saveModelMenuItem.setText("Сохранить");
        saveModelMenuItem.setToolTipText("");
        saveModelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveModelMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveModelMenuItem);

        loadModelMenuItem.setText("Загрузить");
        loadModelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadModelMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadModelMenuItem);

        jMenuBar1.add(fileMenu);

        modelMenu.setText("Модель");

        generateMenuItem.setText("Генерация элементов");
        generateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateMenuItemActionPerformed(evt);
            }
        });
        modelMenu.add(generateMenuItem);

        clearingMenu.setText("Очистка модели");

        clearExtensionalsMenuItem.setText("Удалить все экстенсионалы");
        clearExtensionalsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearExtensionalsMenuItemActionPerformed(evt);
            }
        });
        clearingMenu.add(clearExtensionalsMenuItem);

        removeAllNotDefFramesMenuItem.setText("Удалить все не def-фреймы");
        removeAllNotDefFramesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllNotDefFramesMenuItemActionPerformed(evt);
            }
        });
        clearingMenu.add(removeAllNotDefFramesMenuItem);

        removeAllNotUsedConceptsMenuItem.setText("Удалить все неиспользуемые концепты");
        removeAllNotUsedConceptsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllNotUsedConceptsMenuItemActionPerformed(evt);
            }
        });
        clearingMenu.add(removeAllNotUsedConceptsMenuItem);

        removeAllNotUsedConstantsMenuItem.setText("Удалить все неиспользуемые константы");
        removeAllNotUsedConstantsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllNotUsedConstantsMenuItemActionPerformed(evt);
            }
        });
        clearingMenu.add(removeAllNotUsedConstantsMenuItem);

        clearModelMenuItem.setText("Удалить все элементы ");
        clearModelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearModelMenuItemActionPerformed(evt);
            }
        });
        clearingMenu.add(clearModelMenuItem);

        modelMenu.add(clearingMenu);

        framesMultipleInheritanceCheckBoxMenuItem.setSelected(true);
        framesMultipleInheritanceCheckBoxMenuItem.setText("Разрешить множественное наследование фреймов");
        framesMultipleInheritanceCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                framesMultipleInheritanceCheckBoxMenuItemActionPerformed(evt);
            }
        });
        modelMenu.add(framesMultipleInheritanceCheckBoxMenuItem);

        conceptsMultipleInheritanceCheckBoxMenuItem.setSelected(true);
        conceptsMultipleInheritanceCheckBoxMenuItem.setText("Разрешить множественное наследование концептов");
        conceptsMultipleInheritanceCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conceptsMultipleInheritanceCheckBoxMenuItemActionPerformed(evt);
            }
        });
        modelMenu.add(conceptsMultipleInheritanceCheckBoxMenuItem);

        rolesExpansionCheckBoxMenuItem.setText("Разрешить расширение ролей дочерними фреймами");
        rolesExpansionCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rolesExpansionCheckBoxMenuItemActionPerformed(evt);
            }
        });
        modelMenu.add(rolesExpansionCheckBoxMenuItem);

        jMenuBar1.add(modelMenu);

        viewMenu.setText("Вид");

        framesHierarchyViewMenu.setText("Иерархия фреймов");

        expandFrameHierarchyMenuItem.setText("Раскрыть");
        expandFrameHierarchyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expandFrameHierarchyMenuItemActionPerformed(evt);
            }
        });
        framesHierarchyViewMenu.add(expandFrameHierarchyMenuItem);

        collapseFrameHierarchyMenuItem.setText("Свернуть");
        collapseFrameHierarchyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collapseFrameHierarchyMenuItemActionPerformed(evt);
            }
        });
        framesHierarchyViewMenu.add(collapseFrameHierarchyMenuItem);

        viewMenu.add(framesHierarchyViewMenu);

        conceptsHierarchyViewMenu.setText("Иерархия концептов");

        expandConceptHierarchyMenuItem.setText("Раскрыть");
        expandConceptHierarchyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expandConceptHierarchyMenuItemActionPerformed(evt);
            }
        });
        conceptsHierarchyViewMenu.add(expandConceptHierarchyMenuItem);

        collapseConceptHierarchyMenuItem.setText("Свернуть");
        collapseConceptHierarchyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collapseConceptHierarchyMenuItemActionPerformed(evt);
            }
        });
        conceptsHierarchyViewMenu.add(collapseConceptHierarchyMenuItem);

        viewMenu.add(conceptsHierarchyViewMenu);

        jMenuBar1.add(viewMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 744, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(mainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFrameButtonActionPerformed
        ChoiceTypeOfNewFrameDialog chTOfNewWframe = new ChoiceTypeOfNewFrameDialog(this, true);
        chTOfNewWframe.setVisible(true);
        if (ActualData.addingIsSucces()){
            updateFrameIsaTree();
            updateConceptIsaTree();
        }
    }//GEN-LAST:event_addFrameButtonActionPerformed

    private void deleteFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFrameButtonActionPerformed
        // TODO add your handling code here:
        TreeSelectionModel TSM = frameTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null) 
            return;
        DefaultMutableTreeNode TC = (DefaultMutableTreeNode)TP.getLastPathComponent();
        
        String s = (String) TC.getUserObject();
        if (!s.equals("Frames")) {
            AbstractFrame frame = ActualData.getFrameByName(s);
            if (ActualData.frameIsUsedInDefDemension(frame)){
                new ErrorDialog(this, true, "Фрейм используется в def-измерении, сначала удалите все его def-концепты!").setVisible(true);
                return;
            }
            else{
                ActualData.removeFrameByName(s);
                updateFrameIsaTree();
            }
        }
    }//GEN-LAST:event_deleteFrameButtonActionPerformed

    private void frameTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_frameTreeMouseClicked
        TreeSelectionModel TSM = frameTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null)
            return;
        DefaultMutableTreeNode TC = (DefaultMutableTreeNode)TP.getLastPathComponent();
        String s = (String) TC.getUserObject();
        if (!s.equals("Frames")) {
            frameViewButton.setEnabled(true);
            deleteFrameButton.setEnabled(true);
        }
        else {
            frameViewButton.setEnabled(false);
            deleteFrameButton.setEnabled(false);
        }
    }//GEN-LAST:event_frameTreeMouseClicked
 
    private void frameViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frameViewButtonActionPerformed
        // TODO add your handling code here:
        TreeSelectionModel TSM = frameTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null)  
            return;
        DefaultMutableTreeNode TC = (DefaultMutableTreeNode)TP.getLastPathComponent();
        String s = (String) TC.getUserObject();
        if (!s.equals("Frames")) {
            AbstractFrame fr = ActualData.getFrameByName(s);
            viewFrame(fr);
        }
        updateConceptIsaTree();
    }//GEN-LAST:event_frameViewButtonActionPerformed

    private void conceptViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conceptViewButtonActionPerformed
        TreeSelectionModel TSM = conceptTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null)  
            return;
        DefaultMutableTreeNode TC = (DefaultMutableTreeNode)TP.getLastPathComponent();
        String s = (String) TC.getUserObject();
        if (!s.equals("Concepts")) {
            Concept conc = ActualData.getConceptByName(s);
            ConceptDialog cwd = new ConceptDialog(this, true);
            cwd.setConcept(conc);
            cwd.setVisible(true);
        }
        updateFrameIsaTree();
        updateConceptIsaTree();
    }//GEN-LAST:event_conceptViewButtonActionPerformed

    private void createConceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createConceptButtonActionPerformed
        ConceptDialog cwd = new ConceptDialog(this, true);
        cwd.setVisible(true);
        if (ActualData.addingIsSucces()){
            updateFrameIsaTree();
            updateConceptIsaTree();
        }
    }//GEN-LAST:event_createConceptButtonActionPerformed

    private void constantViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_constantViewButtonActionPerformed
        TreeSelectionModel TSM = conceptTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null) 
            return;
        DefaultMutableTreeNode TC = (DefaultMutableTreeNode)TP.getLastPathComponent();
        String s = (String) TC.getUserObject();
        if (!s.equals("Concepts")) {
            Concept conc = ActualData.getConceptByName(s);
            ConstantViewDialog cwd = new ConstantViewDialog(this, true);
            cwd.setConcept(conc);
            cwd.setVisible(true);
        }
        
    }//GEN-LAST:event_constantViewButtonActionPerformed

    private void removeConceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeConceptButtonActionPerformed
        TreeSelectionModel TSM = conceptTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null)  
            return;
        DefaultMutableTreeNode TC = (DefaultMutableTreeNode)TP.getLastPathComponent();
        String s = (String) TC.getUserObject();
        if (!s.equals("Concepts")) {
            if (ActualData.conceptIsUsed(ActualData.getConceptByName(s))){
                String errMess ="Концепт задействован во фреймах или является базой для def-концептов, сначала удалите их!";
                ErrorDialog errorD = new ErrorDialog(new javax.swing.JFrame(), true, errMess);
                errorD.setVisible(true);
                return;
            }
            ActualData.removeConceptByName(s);
            updateFrameIsaTree();
            updateConceptIsaTree();
        }
    }//GEN-LAST:event_removeConceptButtonActionPerformed

    private void saveModelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveModelMenuItemActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filterXml = new FileNameExtensionFilter(".xml","xml");
        FileNameExtensionFilter filterConDesLan = new FileNameExtensionFilter(".cdl","cdl");
        JFileChooser fc = new JFileChooser();
        fc.removeChoosableFileFilter(fc.getFileFilter());
        fc.setFileFilter(filterConDesLan);
        fc.setFileFilter(filterXml);
        String absolutePath;
        if ( fc.showSaveDialog(null) == JFileChooser.APPROVE_OPTION ) {
            absolutePath = fc.getSelectedFile().getAbsolutePath().trim();
            FileFilter acceptedFilter = fc.getFileFilter();
            String extensionDescr = acceptedFilter.getDescription();
            switch (extensionDescr) {
                case ".xml":
                    if (!absolutePath.endsWith(".xml"))
                        absolutePath+=".xml";
                    try {
                        ActualData.save(absolutePath);
                        ErrorDialog errD = new ErrorDialog(this, true, "Сохранение в файл прошло успешно!");
                        errD.setTitle("Модель сохранена");
                        errD.setVisible(true);
                    }catch (Exception ex) {
                        new ErrorDialog(this, true, "Ошибка при сохранении модели в файл!").setVisible(true);}
                    break;
                case ".cdl":{
                    if (!absolutePath.endsWith(".cdl"))
                        absolutePath+=".cdl";
                    try {
                        InputOutputCDL.save(absolutePath);
                        ErrorDialog errD = new ErrorDialog(this, true, "Сохранение в файл прошло успешно!");
                        errD.setTitle("Модель сохранена");
                        errD.setVisible(true);
                    } catch (Exception ex) {
                        new ErrorDialog(this, true, "Ошибка при сохранении модели в файл!!").setVisible(true);
                    }
                }
            }
        }
    }//GEN-LAST:event_saveModelMenuItemActionPerformed

    private void loadModelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadModelMenuItemActionPerformed
        FileNameExtensionFilter filterXml = new FileNameExtensionFilter(".xml","xml");
        FileNameExtensionFilter filterConDesLan = new FileNameExtensionFilter(".cdl","cdl");
        JFileChooser fc = new JFileChooser();
        fc.removeChoosableFileFilter(fc.getFileFilter());
        fc.setFileFilter(filterConDesLan);
        fc.setFileFilter(filterXml);
        int ret = fc.showDialog(null, "Открыть файл");
        String absolutePath;
        if (ret == JFileChooser.APPROVE_OPTION) {
            absolutePath = fc.getSelectedFile().getAbsolutePath().trim();
            FileFilter acceptedFilter = fc.getFileFilter();
            String extensionDescr = acceptedFilter.getDescription();
            switch (extensionDescr) {
                case ".xml":
                    if (!absolutePath.endsWith(".xml"))
                        absolutePath+=".xml";
                    try {
                        ActualData.getConfiguration().putBoolSetting("framesMultipleInheritance", true);
                        framesMultipleInheritanceCheckBoxMenuItem.setState(true);
                        ActualData.getConfiguration().putBoolSetting("conceptsMultipleInheritance", true);
                        conceptsMultipleInheritanceCheckBoxMenuItem.setState(true);
                        InputOutputXML.load(absolutePath);
                        ErrorDialog errD = new ErrorDialog(this, true, "Загрузка из файла прошла успешно!");
                        errD.setTitle("Модель загружена");
                        errD.setVisible(true);
                    }catch (Exception ex) {
                        new ErrorDialog(this, true, "Ошибка при загрузке модели из файла!").setVisible(true);
                    }
                    break;
                case ".cdl":{
                    if (!absolutePath.endsWith(".cdl"))
                        absolutePath+=".cdl";
                    try {
                        InputOutputCDL.load(absolutePath);
                        ErrorDialog errD = new ErrorDialog(this, true, "Загрузка из файла прошла успешно!");
                        errD.setTitle("Модель загружена");
                        errD.setVisible(true);
                    } catch (IOException ex) {
                        new ErrorDialog(this, true, "Ошибка при загрузке модели из файла!").setVisible(true);
                    }
                }
            }
            updateFrameIsaTree();
            updateConceptIsaTree();
        }
    }//GEN-LAST:event_loadModelMenuItemActionPerformed

    private void clearModelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearModelMenuItemActionPerformed
        ActualData.clear();
        updateFrameIsaTree();
        updateConceptIsaTree();
    }//GEN-LAST:event_clearModelMenuItemActionPerformed

    private void clearExtensionalsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearExtensionalsMenuItemActionPerformed
        ActualData.clearExtensionals();
    }//GEN-LAST:event_clearExtensionalsMenuItemActionPerformed

    private void generateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateMenuItemActionPerformed
        GenerateDialog generateDialog = new GenerateDialog(new javax.swing.JFrame(), true);
        generateDialog.setVisible(true);
        updateFrameIsaTree();
        updateConceptIsaTree();
    }//GEN-LAST:event_generateMenuItemActionPerformed

    private void removeAllNotDefFramesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllNotDefFramesMenuItemActionPerformed
        ActualData.removeAllNotDefFrames();
        updateFrameIsaTree();
        updateConceptIsaTree();
    }//GEN-LAST:event_removeAllNotDefFramesMenuItemActionPerformed

    private void removeAllNotUsedConceptsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllNotUsedConceptsMenuItemActionPerformed
        for (Concept concept: (ArrayList<Concept>) ActualData.getConcepts().clone())
            if (!ActualData.conceptIsUsed(concept))
                ActualData.removeConceptByName(concept.getName());
        updateConceptIsaTree();
    }//GEN-LAST:event_removeAllNotUsedConceptsMenuItemActionPerformed

    private void removeAllNotUsedConstantsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllNotUsedConstantsMenuItemActionPerformed
        for (Concept concept: ActualData.getConstants().keySet()){
            for (Constant constant: (ArrayList<Constant>)ActualData.getConstants().get(concept).clone()){
                if (!(ActualData.constantIsUsedInFrame(constant) || ActualData.constantIsUsedInFrame(constant)))
                    ActualData.removeConstantInDomenByName(constant.getName(), concept);
            }
        }
    }//GEN-LAST:event_removeAllNotUsedConstantsMenuItemActionPerformed
    
    private void framesMultipleInheritanceCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_framesMultipleInheritanceCheckBoxMenuItemActionPerformed
        // TODO add your handling code here:
        boolean b = framesMultipleInheritanceCheckBoxMenuItem.getState();
        if (!b){
            if (ActualData.framesMultipleInhIsExists()){
                ErrorDialog errD = new ErrorDialog(this, true, "В модели уже присутствует множественное наследование фреймов!");
                errD.setTitle("Настройки не изменены");
                errD.setVisible(true);
                framesMultipleInheritanceCheckBoxMenuItem.setState(true);
                ActualData.getConfiguration().putBoolSetting("framesMultipleInheritance", true);
                return;
            }
        }
        ActualConfiguration config = ActualData.getConfiguration();
        config.putBoolSetting("framesMultipleInheritance", b);
    }//GEN-LAST:event_framesMultipleInheritanceCheckBoxMenuItemActionPerformed

    private void conceptsMultipleInheritanceCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conceptsMultipleInheritanceCheckBoxMenuItemActionPerformed
        // TODO add your handling code here:
        boolean b = conceptsMultipleInheritanceCheckBoxMenuItem.getState();
        if (!b){
            if (ActualData.conceptsMultipleInhIsExists()){
                ErrorDialog errD = new ErrorDialog(this, true, "В модели уже присутствует множественное наследование концептов!");
                errD.setTitle("Настройки не изменены");
                errD.setVisible(true);
                conceptsMultipleInheritanceCheckBoxMenuItem.setState(true);
                ActualData.getConfiguration().putBoolSetting("conceptsMultipleInheritance", true);
                return;
            }
        }
        ActualConfiguration config = ActualData.getConfiguration();
        config.putBoolSetting("conceptsMultipleInheritance", b);
    }//GEN-LAST:event_conceptsMultipleInheritanceCheckBoxMenuItemActionPerformed

    private void rolesExpansionCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rolesExpansionCheckBoxMenuItemActionPerformed
        // TODO add your handling code here:
        boolean b = rolesExpansionCheckBoxMenuItem.getState();
        ActualData.getConfiguration().getBoolSettings().put("rolesExpansionInChildFrames", b);
        ActualData.reformFrameTree();
        b = framesMultipleInheritanceCheckBoxMenuItem.getState();
        if (!b){
            if (ActualData.framesMultipleInhIsExists()){
                ErrorDialog errD = new ErrorDialog(this, true, "В модели появилось множественное наследование фреймов. Ограничение выключено.");
                errD.setTitle("Множественное наследование фреймов разрешено");
                errD.setVisible(true);
                framesMultipleInheritanceCheckBoxMenuItem.setState(true);
                ActualData.getConfiguration().putBoolSetting("framesMultipleInheritance", true);
            }
        }
        updateFrameIsaTree();
    }//GEN-LAST:event_rolesExpansionCheckBoxMenuItemActionPerformed

    private void conceptTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_conceptTreeMouseClicked
        // TODO add your handling code here:
        TreeSelectionModel TSM = conceptTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null){
            constantViewButton.setEnabled(false);
            conceptViewButton.setEnabled(false);
            removeConceptButton.setEnabled(false);
            return;
        }
        DefaultMutableTreeNode TC = (DefaultMutableTreeNode)TP.getLastPathComponent();
        String s = (String) TC.getUserObject();
        if (s.equals("Concepts")) {
            constantViewButton.setEnabled(false);
            conceptViewButton.setEnabled(false);
            removeConceptButton.setEnabled(false);
        }
        else{
            constantViewButton.setEnabled(true);
            conceptViewButton.setEnabled(true);
            removeConceptButton.setEnabled(true);
        }
    }//GEN-LAST:event_conceptTreeMouseClicked

    private void conceptTreeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_conceptTreeKeyReleased
        TreeSelectionModel TSM = conceptTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null){
            constantViewButton.setEnabled(false);
            conceptViewButton.setEnabled(false);
            removeConceptButton.setEnabled(false);
            return;
        }
        DefaultMutableTreeNode TC = (DefaultMutableTreeNode)TP.getLastPathComponent();
        String s = (String) TC.getUserObject();
        if (s.equals("Concepts")) {
            constantViewButton.setEnabled(false);
            conceptViewButton.setEnabled(false);
            removeConceptButton.setEnabled(false);
        }
        else{
            constantViewButton.setEnabled(true);
            conceptViewButton.setEnabled(true);
            removeConceptButton.setEnabled(true);
        }
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            conceptViewButtonActionPerformed(null);
        else if (evt.getKeyCode() == KeyEvent.VK_DELETE)
            removeConceptButtonActionPerformed(null);
    }//GEN-LAST:event_conceptTreeKeyReleased

    private void frameTreeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_frameTreeKeyReleased
        TreeSelectionModel TSM = frameTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null)
            return;
        DefaultMutableTreeNode TC = (DefaultMutableTreeNode)TP.getLastPathComponent();
        String s = (String) TC.getUserObject();
        if (!s.equals("Frames")) {
            frameViewButton.setEnabled(true);
            deleteFrameButton.setEnabled(true);
        }
        else {
            frameViewButton.setEnabled(false);
            deleteFrameButton.setEnabled(false);
        }
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            frameViewButtonActionPerformed(null);
        else if (evt.getKeyCode() == KeyEvent.VK_DELETE)
            deleteFrameButtonActionPerformed(null);
    }//GEN-LAST:event_frameTreeKeyReleased

    private static void expandTree(JTree tree){
        for (int i = 0; i < tree.getRowCount(); i++) {
            tree.expandRow(i);
        }
    }
    private static void collapseTree(JTree tree){
        for (int i = tree.getRowCount()-1; i >-1 ; i--) {
            tree.collapseRow(i);
        }
    }
    private void expandFrameHierarchyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expandFrameHierarchyMenuItemActionPerformed
        expandTree(frameTree);
    }//GEN-LAST:event_expandFrameHierarchyMenuItemActionPerformed

    private void collapseFrameHierarchyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collapseFrameHierarchyMenuItemActionPerformed
        collapseTree(frameTree);
    }//GEN-LAST:event_collapseFrameHierarchyMenuItemActionPerformed

    private void expandConceptHierarchyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expandConceptHierarchyMenuItemActionPerformed
        expandTree(conceptTree);
    }//GEN-LAST:event_expandConceptHierarchyMenuItemActionPerformed

    private void collapseConceptHierarchyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collapseConceptHierarchyMenuItemActionPerformed
        collapseTree(conceptTree);
    }//GEN-LAST:event_collapseConceptHierarchyMenuItemActionPerformed
    public static void viewFrame(AbstractFrame fr){
        if (fr instanceof AndFrame){
            BinaryFrameViewDialog frViewDialog = new BinaryFrameViewDialog(new javax.swing.JFrame(), true);
            frViewDialog.setFrame((AbstractBinaryFrame) fr); 
            frViewDialog.setVisible(true);
        }
        else if (fr instanceof OrFrame){
            BinaryFrameViewDialog frViewDialog = new BinaryFrameViewDialog(new javax.swing.JFrame(), true);
            frViewDialog.setFrame((AbstractBinaryFrame) fr);
            frViewDialog.setVisible(true);
        }
        else if (fr instanceof AbstractSimpleFrame) {
            ViewSimpleFrameDialog frViewDialog = new ViewSimpleFrameDialog(new javax.swing.JFrame(), true);
            frViewDialog.setFrame((AbstractSimpleFrame) fr);
            frViewDialog.setVisible(true);
        }
        else if (fr instanceof NotFrame){
            NotFrameViewDialog frViewDialog = new NotFrameViewDialog(new javax.swing.JFrame(), true);
            frViewDialog.setFrame((NotFrame) fr);
            frViewDialog.setVisible(true);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //AbstractSimpleFrame.main(args);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFrameButton;
    private javax.swing.JMenuItem clearExtensionalsMenuItem;
    private javax.swing.JMenuItem clearModelMenuItem;
    private javax.swing.JMenu clearingMenu;
    private javax.swing.JMenuItem collapseConceptHierarchyMenuItem;
    private javax.swing.JMenuItem collapseFrameHierarchyMenuItem;
    private javax.swing.JTree conceptTree;
    private javax.swing.JButton conceptViewButton;
    private javax.swing.JMenu conceptsHierarchyViewMenu;
    private javax.swing.JCheckBoxMenuItem conceptsMultipleInheritanceCheckBoxMenuItem;
    private javax.swing.JPanel conceptsPanel;
    private javax.swing.JButton constantViewButton;
    private javax.swing.JButton createConceptButton;
    private javax.swing.JButton deleteFrameButton;
    private javax.swing.JMenuItem expandConceptHierarchyMenuItem;
    private javax.swing.JMenuItem expandFrameHierarchyMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTree frameTree;
    private javax.swing.JButton frameViewButton;
    private javax.swing.JMenu framesHierarchyViewMenu;
    private javax.swing.JCheckBoxMenuItem framesMultipleInheritanceCheckBoxMenuItem;
    private javax.swing.JPanel framesPanel;
    private javax.swing.JMenuItem generateMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem loadModelMenuItem;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JMenu modelMenu;
    private javax.swing.JMenuItem removeAllNotDefFramesMenuItem;
    private javax.swing.JMenuItem removeAllNotUsedConceptsMenuItem;
    private javax.swing.JMenuItem removeAllNotUsedConstantsMenuItem;
    private javax.swing.JButton removeConceptButton;
    private javax.swing.JCheckBoxMenuItem rolesExpansionCheckBoxMenuItem;
    private javax.swing.JMenuItem saveModelMenuItem;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables

    private DefaultMutableTreeNode getFrameHierarchyTree(FrameNode node){
        ArrayList<FrameNode> childNodes = node.getChildNodes();
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(node.getValue().getName());
        for (FrameNode child: childNodes){
            DefaultMutableTreeNode childNode = getFrameHierarchyTree(child);  
            root.add(childNode);
        }
        return root;
    }
    private DefaultMutableTreeNode getConceptHierarchyTree(ConceptNode node){
        ArrayList<ConceptNode> childNodes = node.getChildNodes();
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(node.getValue().getName());
        for (ConceptNode child: childNodes){
            DefaultMutableTreeNode childNode = getConceptHierarchyTree(child);  
            root.add(childNode);
        }
        return root;
    }
    private static void exportExpandedNodes(JTree from, JTree to){
        HashSet<String> expandedNodeNames = new HashSet<>();
        for (int i = 1; i < from.getRowCount(); i++) {
            if (from.isExpanded(i)){
                TreePath p = from.getPathForRow(i);
                String name = ((DefaultMutableTreeNode) p.getLastPathComponent()).toString();
                if (!expandedNodeNames.contains(name))
                    expandedNodeNames.add(name);
            }
        }
        int i = 0;
        while (i < to.getRowCount()){
            TreePath p = to.getPathForRow(i);
            String name = ((DefaultMutableTreeNode) p.getLastPathComponent()).toString();
            if (expandedNodeNames.contains(name))
                to.expandPath(p);
            i++;
        }
    }
    private void updateFrameIsaTree(){
        JTree newTree = new JTree(getFrameHierarchyTree(ActualData.getFrameHoerarchy()));
        exportExpandedNodes(frameTree, newTree);
        frameTree = newTree;
        frameTree.setCellRenderer(new FrameNodeCellRenderer());
        frameTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                frameTreeMouseClicked(evt);
            }
        });
        frameTree.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                frameTreeKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(frameTree);
        frameViewButton.setEnabled(false);
        deleteFrameButton.setEnabled(false);
    }
    private void updateConceptIsaTree(){
        JTree newTree = new JTree(getConceptHierarchyTree(ActualData.getConceptHoerarchy()));
        exportExpandedNodes(conceptTree, newTree);
        conceptTree = newTree;
        conceptTree.setCellRenderer(new ConceptNodeCellRenderer());
        conceptTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                conceptTreeMouseClicked(evt);
            }
        });
        conceptTree.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                conceptTreeKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(conceptTree);
        constantViewButton.setEnabled(false);
        conceptViewButton.setEnabled(false);
        removeConceptButton.setEnabled(false);
    }
}
