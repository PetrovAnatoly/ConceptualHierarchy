/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.Dialogs.FramesDialogs;

import Frames.CharacteristicFrame;
import Frames.Structure.Body;
import Frames.Structure.Quantor;
import Frames.Structure.Slot;
import Frames.Structure.SlotArgument;
import GUI.Dialogs.ErrorDialog;
import GUI.TableModels.FrameSlotsTableModel;
import conceptualhierarchy.ActualData;
import java.util.ArrayList;
import java.util.HashMap;
import Сoncepts.Concept;
import Сoncepts.Constant;
import Сoncepts.Variable;

/**
 *
 * @author Anatoly
 */
public class CreateCharacteristicFrameDialog extends javax.swing.JDialog {

    /**
     * Creates new form CreateCharacteristicFrameDialog
     * @param parent
     * @param modal
     */
    public CreateCharacteristicFrameDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        pack();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        quantorsTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        slotsTable = new javax.swing.JTable();
        newFrameNameTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        predicateTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel7.setText("Слоты (константы заключаются в одинарные кавычки):");

        quantorsTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantorsTextFieldActionPerformed(evt);
            }
        });

        jLabel6.setText("Кванторы:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Characteristic-Frame:");
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        slotsTable.setModel(myTableModel);
        jScrollPane1.setViewportView(slotsTable);

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        predicateTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predicateTextFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("Предикат:");

        jLabel3.setText("Имя нового фрейма:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(quantorsTextField)
                            .addComponent(predicateTextField)
                            .addComponent(newFrameNameTextField))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 84, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addContainerGap(79, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(newFrameNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(quantorsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(predicateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quantorsTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantorsTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantorsTextFieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String newFrName = newFrameNameTextField.getText();
        String newFrPredicate = predicateTextField.getText();
        String quantorsStr = quantorsTextField.getText();
        if (!ActualData.avalibleFrameName(newFrName)) {
            ErrorDialog errorD = new ErrorDialog(new javax.swing.JFrame(), true, "Фрейм с таким именем уже есть");
            errorD.setVisible(true);
        }
        else if (newFrPredicate.equals("")){
            ErrorDialog errorD = new ErrorDialog(new javax.swing.JFrame(), true, "Введите предикат!");
            errorD.setVisible(true);
        }
        else if (newFrName.equals("")){
            ErrorDialog errorD = new ErrorDialog(new javax.swing.JFrame(), true, "Введите имя фрейма!");
            errorD.setVisible(true);
        }
        else if (!Quantor.correctQuantorString(quantorsStr)){
            ErrorDialog errorD = new ErrorDialog(new javax.swing.JFrame(), true, "Некорректная строка кванторов");
            errorD.setVisible(true);
        }
        else {
            ArrayList<Concept> newConcepts = new ArrayList();
            HashMap<Concept, ArrayList<Constant>> newConstants = new HashMap();
            HashMap<Concept, ArrayList<Variable>> newVariables = new HashMap();
            Body newFrBody = new Body();
            for (int i = 0; i < slotsTable.getRowCount(); i++){
                String role = (String) slotsTable.getValueAt(i, 0);
                String argumentStr = (String) slotsTable.getValueAt(i, 1);
                String conceptStr = (String) slotsTable.getValueAt(i, 2);
                if (role.equals("") || argumentStr.equals("") || conceptStr.equals("")){
                    String errorMassage = "Некорректный ввод слотов";
                    ErrorDialog errorD = new ErrorDialog(new javax.swing.JFrame(), true, errorMassage);
                    errorD.setVisible(true);
                    return;
                }
                Concept slotConc = null;
                SlotArgument slArg = null;
                boolean newConcIndicator = false;
                boolean newConcInThisNewFrIndicator = true;
                boolean newConstInd = true;
                boolean newVarInd = true;
                if (ActualData.avalibleConceptName(conceptStr)){

                    for (Concept conc: newConcepts)
                        if (conc.getName().equals("conceptStr")) {
                            newConcInThisNewFrIndicator = false;
                            slotConc = conc;
                            break;
                        }
                    if (newConcInThisNewFrIndicator){
                        slotConc = new Concept(conceptStr);
                        newConcepts.add(slotConc);
                    }
                    newConcIndicator = true;
                }
                else
                    slotConc = ActualData.getConceptByName(conceptStr);
                if (argumentStr.charAt(0) == '\'' && argumentStr.charAt(argumentStr.length()-1) == '\''){
                    if (newConcIndicator){
                        if (newConstants.containsKey(slotConc)){
                            ArrayList<Constant> newConstInDomen = newConstants.get(slotConc);
                            for (Constant constant: newConstInDomen)
                                if (constant.getName().equals(argumentStr)){
                                    slArg = constant;
                                    newConstInd = false;
                                }
                            if (newConstInd) {
                                slArg = new Constant(argumentStr, slotConc);
                                newConstInDomen.add((Constant) slArg);
                            }
                        }
                        else {
                            ArrayList<Constant> newConstInDomen = new ArrayList();
                            slArg = new Constant(argumentStr, slotConc);
                            newConstInDomen.add((Constant) slArg);
                            newConstants.put(slotConc, newConstInDomen);
                        }
                    }
                    else {
                        if (!ActualData.avalibleConstantNameInDomen(argumentStr, slotConc)){
                            slArg = ActualData.getConstantInDomenByName(argumentStr, slotConc);
                        }
                        else{
                            if (newConstants.containsKey(slotConc)){
                                ArrayList<Constant> newConstInDomen = newConstants.get(slotConc);
                                for (Constant constant: newConstInDomen)
                                    if (constant.getName().equals(argumentStr)){
                                        slArg = constant;
                                        newConstInd = false;
                                    }
                                if (newConstInd) {
                                    slArg = new Constant(argumentStr, slotConc);
                                    newConstInDomen.add((Constant) slArg);
                                }
                            }
                            else {
                                ArrayList<Constant> newConstInDomen = new ArrayList();
                                slArg = new Constant(argumentStr, slotConc);
                                newConstInDomen.add((Constant) slArg);
                                newConstants.put(slotConc, newConstInDomen);
                            }
                        }
                    }
                }
                else{
                    if (newConcIndicator){
                        if (newVariables.containsKey(slotConc)){
                            ArrayList<Variable> newVarInDomen = newVariables.get(slotConc);
                            for (Variable var: newVarInDomen)
                                if (var.getName().equals(argumentStr)){
                                    slArg = var;
                                    newVarInd = false;
                                }
                            if (newVarInd) {
                                slArg = new Variable(argumentStr, slotConc);
                                newVarInDomen.add((Variable) slArg);
                            }
                        }
                        else {
                            ArrayList<Variable> newVarInDomen = new ArrayList();
                            slArg = new Variable(argumentStr, slotConc);
                            newVarInDomen.add((Variable) slArg);
                            newVariables.put(slotConc, newVarInDomen);
                        }
                    }
                    else {
                        if (!ActualData.avalibleVariableNameInDomen(argumentStr, slotConc)){
                            slArg = ActualData.getVariableInDomenByName(argumentStr, slotConc);
                        }
                        else{
                            if (newConstants.containsKey(slotConc)){
                                ArrayList<Variable> newVarInDomen = newVariables.get(slotConc);
                                for (Variable var: newVarInDomen)
                                    if (var.getName().equals(argumentStr)){
                                        slArg = var;
                                        newConstInd = false;
                                    }
                                if (newConstInd) {
                                    slArg = new Variable(argumentStr, slotConc);
                                    newVarInDomen.add((Variable) slArg);
                                }
                            }
                            else {
                                ArrayList<Variable> newVarInDomen = new ArrayList();
                                slArg = new Variable(argumentStr, slotConc);
                                newVarInDomen.add((Variable) slArg);
                                newVariables.put(slotConc, newVarInDomen);
                            }
                        }
                    }
                }
                Slot slot = new Slot(role, slArg, slotConc);
                newFrBody.addSlot(slot);
            }
            ArrayList<Variable> vrbls = newFrBody.getAllVariablesInBody();
            ArrayList<Quantor> qntrs = Quantor.getQuantorArray(quantorsStr, vrbls);
            CharacteristicFrame newFrame = new CharacteristicFrame(newFrName, newFrPredicate, qntrs, newFrBody);
            if (ActualData.thisFrameAlreadyExist(newFrame)){
                ErrorDialog errorD = new ErrorDialog(new javax.swing.JFrame(), true, "Фрейм с таким описанием уже есть!");
                errorD.setVisible(true);
            }
            else{
                ActualData.addFrameToHierarchy(newFrame);
                setVisible(false);
                dispose();
            } 
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private final FrameSlotsTableModel myTableModel = new FrameSlotsTableModel("creatingChFr");
    private void predicateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predicateTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_predicateTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateCharacteristicFrameDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateCharacteristicFrameDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateCharacteristicFrameDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateCharacteristicFrameDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CreateCharacteristicFrameDialog dialog = new CreateCharacteristicFrameDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField newFrameNameTextField;
    private javax.swing.JTextField predicateTextField;
    private javax.swing.JTextField quantorsTextField;
    private javax.swing.JTable slotsTable;
    // End of variables declaration//GEN-END:variables
}
